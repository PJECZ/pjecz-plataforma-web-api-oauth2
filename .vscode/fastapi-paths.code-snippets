{
    "FastAPI paths": {
        "scope": "python",
        "prefix": "fpaths",
        "body": [
            "\"\"\"",
            "${1:Modulos} ${2:v1}, rutas (paths)",
            "\"\"\"",
            "from fastapi import APIRouter, Depends, HTTPException",
            "from fastapi_pagination import LimitOffsetPage",
            "from fastapi_pagination.ext.sqlalchemy import paginate",
            "from sqlalchemy.orm import Session",
            "",
            "from lib.database import get_db",
            "from plataforma_web.v1.roles.models import Permiso",
            "from plataforma_web.v1.usuarios.authentications import get_current_active_user",
            "from plataforma_web.v1.usuarios.schemas import UsuarioInBD",
            "",
            "from .crud import get_${4:plural}, get_${5:singular}",
            "from .schemas import ${6:EsquemaOut}",
            "",
            "router = APIRouter()",
            "",
            "",
            "@router.get(\"\", response_model=LimitOffsetPage[${6:EsquemaOut}])",
            "async def list_paginate(",
            "\tcurrent_user: UsuarioInBD = Depends(get_current_active_user),",
            "\tdb: Session = Depends(get_db),",
            "):",
            "\t\"\"\"Listado paginado de ${4:plural}\"\"\"",
            "\tif not current_user.permissions & Permiso.${7:VER_PERMISO} == Permiso.${7:VER_PERMISO}:",
            "\t\traise HTTPException(status_code=403, detail=\"Forbidden\")",
            "\treturn paginate(get_${4:plural}(db))",
            "",
            "",
            "@router.get(\"/{${5:singular}_id}\", response_model=${6:EsquemaOut})",
            "async def detail(",
            "\t${5:singular}_id: int,",
            "\tcurrent_user: UsuarioInBD = Depends(get_current_active_user),",
            "\tdb: Session = Depends(get_db),",
            "):",
            "\t\"\"\"Detalle de una ${5:singular} a partir de su id\"\"\"",
            "\tif not current_user.permissions & Permiso.${7:VER_PERMISO} == Permiso.${7:VER_PERMISO}:",
            "\t\traise HTTPException(status_code=403, detail=\"Forbidden\")",
            "\ttry:",
            "\t\t${5:singular} = get_${5:singular}(db, ${5:singular}_id)",
            "\texcept IndexError as error:",
            "\t\traise HTTPException(status_code=404, detail=f\"Not found: {str(error)}\") from error",
            "\treturn ${6:EsquemaOut}(",
            "\t\tid=${5:singular}.id,",
            "\t\tnombre=${5:singular}.nombre,",
            "\t)",
            ""
        ],
        "description": "Contenido para paths.py"
    },
    "FastAPI paths autoridad": {
        "scope": "python",
        "prefix": "fpaths_autoridad",
        "body": [
            "\"\"\"",
            "${1:Modulos} ${2:v1}, rutas (paths)",
            "\"\"\"",
            "from datetime import date",
            "from fastapi import APIRouter, Depends, HTTPException",
            "from fastapi_pagination import LimitOffsetPage",
            "from fastapi_pagination.ext.sqlalchemy import paginate",
            "from sqlalchemy.orm import Session",
            "",
            "from lib.database import get_db",
            "from plataforma_web.v1.roles.models import Permiso",
            "from plataforma_web.v1.usuarios.authentications import get_current_active_user",
            "from plataforma_web.v1.usuarios.schemas import UsuarioInBD",
            "",
            "from .crud import get_${4:plural}, get_${5:singular}",
            "from .schemas import ${6:EsquemaOut}",
            "",
            "router = APIRouter()",
            "",
            "",
            "@router.get(\"\", response_model=LimitOffsetPage[${6:EsquemaOut}])",
            "async def list_paginate(",
            "\tautoridad_id: int = None,",
            "\tautoridad_clave: str = None,",
            "\tfecha: date = None,",
            "\tanio: int = None,",
            "\tcurrent_user: UsuarioInBD = Depends(get_current_active_user),",
            "\tdb: Session = Depends(get_db),",
            "):",
            "\t\"\"\"Listado paginado de ${4:plural}\"\"\"",
            "\tif not current_user.permissions & Permiso.${7:VER_PERMISO} == Permiso.${7:VER_PERMISO}:",
            "\t\traise HTTPException(status_code=403, detail=\"Forbidden\")",
            "\ttry:",
            "\t\tconsulta = get_${4:plural}(",
            "\t\t\tdb,",
            "\t\t\tautoridad_id=autoridad_id,",
            "\t\t\tautoridad_clave=autoridad_clave,",
            "\t\t\tfecha=fecha,",
            "\t\t\tanio=anio,",
            "\t\t)",
            "\texcept IndexError as error:",
            "\t\traise HTTPException(status_code=404, detail=f\"Not found: {str(error)}\") from error",
            "\texcept ValueError as error:",
            "\t\traise HTTPException(status_code=406, detail=f\"Not acceptable: {str(error)}\") from error",
            "\treturn paginate(consulta)",
            "",
            "",
            "@router.get(\"/{${5:singular}_id}\", response_model=${6:EsquemaOut})",
            "async def detail(",
            "\t${5:singular}_id: int,",
            "\tcurrent_user: UsuarioInBD = Depends(get_current_active_user),",
            "\tdb: Session = Depends(get_db),",
            "):",
            "\t\"\"\"Detalle de una ${5:singular} a partir de su id\"\"\"",
            "\tif not current_user.permissions & Permiso.${7:VER_PERMISO} == Permiso.${7:VER_PERMISO}:",
            "\t\traise HTTPException(status_code=403, detail=\"Forbidden\")",
            "\ttry:",
            "\t\t${5:singular} = get_${5:singular}(db, ${5:singular}_id)",
            "\texcept IndexError as error:",
            "\t\traise HTTPException(status_code=404, detail=f\"Not found: {str(error)}\") from error",
            "\treturn ${6:EsquemaOut}(",
            "\t\tid=${5:singular}.id,",
            "\t\tnombre=${5:singular}.nombre,",
            "\t)",
            ""
        ],
        "description": "Contenido para paths.py relacionado con autoridad"
    }
}
