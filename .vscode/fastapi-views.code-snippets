{
    "FastAPI views simple": {
        "scope": "python",
        "prefix": "fviewssimple",
        "body": [
            "\"\"\"",
            "${1:Modulos}, vistas",
            "\"\"\"",
            "from typing import List",
            "from fastapi import APIRouter, Depends, HTTPException",
            "from sqlalchemy.orm import Session",
            "",
            "from plataforma_web.${2:blueprint} import crud, schemas",
            "from lib.database import get_db",
            "",
            "router = APIRouter()",
            "",
            "",
            "@router.get('', response_model=List[schemas.${3:Esquema}])",
            "async def listar_${4:plural}(db: Session = Depends(get_db)):",
            "\t\"\"\" Lista de ${4:plural} \"\"\"",
            "\tresultados = []",
            "\tfor ${5:singular} in crud.get_${4:plural}(db):",
            "\t\tresultados.append(schemas.${3:Esquema}(id=${5:singular}.id, ${5:singular}=${5:singular}.nombre))",
            "\treturn resultados",
            "",
            "",
            "@router.get('/{${5:singular}_id}', response_model=schemas.${3:Esquema})",
            "async def consultar_un_${5:singular}(${5:singular}_id: int, db: Session = Depends(get_db)):",
            "\t\"\"\" Consultar un ${5:singular} \"\"\"",
            "\t${5:singular} = crud.get_${5:singular}(db, ${5:singular}_id=${5:singular}_id)",
            "\tif ${5:singular} is None:",
            "\t\traise HTTPException(status_code=400, detail='No existe el ${5:singular}.')",
            "\treturn schemas.${3:Esquema}(id=${5:singular}.id, ${5:singular}=${5:singular}.nombre)",
            ""
        ],
        "description": "Contenido para views.py"
    },
    "FastAPI views autoridad": {
        "scope": "python",
        "prefix": "fviewsauto",
        "body": [
            "\"\"\"",
            "${1:Modulos}, vistas",
            "\"\"\"",
            "from typing import List",
            "from fastapi import APIRouter, Depends, HTTPException",
            "from sqlalchemy.orm import Session",
            "",
            "from plataforma_web.autoridades.crud import get_autoridad",
            "from plataforma_web.${2:blueprint} import crud, schemas",
            "from lib.database import get_db",
            "",
            "router = APIRouter()",
            "",
            "",
            "@router.get('', response_model=List[schemas.${3:Esquema}])",
            "async def listar_${4:plural}(autoridad_id: int, db: Session = Depends(get_db)):",
            "\t\"\"\" Lista de ${4:plural} \"\"\"",
            "\tautoridad = get_autoridad(db, autoridad_id=autoridad_id)",
            "\tif autoridad is None:",
            "\t\traise HTTPException(status_code=400, detail='No existe la autoridad.')",
            "\tresultados = []",
            "\tfor ${5:singular}, autoridad, distrito in crud.get_${4:plural}(db, autoridad_id=autoridad_id):",
            "\t\tresultados.append(",
            "\t\t\tschemas.${3:Esquema}(",
            "\t\t\t\tid=${5:singular}.id,",
            "\t\t\t\tdistrito_id=distrito.id,",
            "\t\t\t\tdistrito=distrito.nombre,",
            "\t\t\t\tautoridad_id=autoridad.id,",
            "\t\t\t\tautoridad=autoridad.descripcion,",
            "\t\t\t\tfecha=${5:singular}.fecha,",
            "\t\t\t\tdescripcion=${5:singular}.descripcion,",
            "\t\t\t\tarchivo=${5:singular}.archivo,",
            "\t\t\t\turl=${5:singular}.url,",
            "\t\t\t)",
            "\t\t)",
            "\treturn resultados",
            "",
            "",
            "@router.get('/{${5:singular}_id}', response_model=schemas.${3:Esquema})",
            "async def consultar_un_${5:singular}(${5:singular}_id: int, db: Session = Depends(get_db)):",
            "\t\"\"\" Consultar un ${5:singular} \"\"\"",
            "\t${5:singular} = crud.get_${5:singular}(db, ${5:singular}_id=${5:singular}_id)",
            "\tif ${5:singular} is None:",
            "\t\traise HTTPException(status_code=400, detail='No existe el ${5:singular}.')",
            "\treturn schemas.${3:Esquema}(",
            "\t\tid=${5:singular}.id,",
            "\t\tdistrito_id=${5:singular}.autoridad.distrito.id,",
            "\t\tdistrito=${5:singular}.autoridad.distrito.nombre,",
            "\t\tautoridad_id=${5:singular}.autoridad.id,",
            "\t\tautoridad=${5:singular}.autoridad.descripcion,",
            "\t\tfecha=${5:singular}.fecha,",
            "\t\tdescripcion=${5:singular}.descripcion,",
            "\t\tarchivo=${5:singular}.archivo,",
            "\t\turl=${5:singular}.url,",
            "\t)",
            ""
        ],
        "description": "Contenido para views.py relacionado con autoridad"
    }
}
